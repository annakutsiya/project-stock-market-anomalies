# -*- coding: utf-8 -*-
"""Project market anomalies

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/163oC2kQuVsB4nYY1IxbBa1HogzNdl-RE
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import pandas_datareader as web
from matplotlib.ticker import FuncFormatter
from datetime import datetime, timedelta

!pip install PyPortfolioOpt

from pypfopt.efficient_frontier import EfficientFrontier 
from pypfopt import risk_models 
from pypfopt import expected_returns
from pypfopt.cla import CLA
import pypfopt.plotting as pplt
from matplotlib.ticker import FuncFormatter

!pip install yfinance --upgrade --no-cache-dir

import yfinance as yf

df_mc = pd.read_excel('pb_new.xlsx')
df_mc['Ticker'] = df_mc['Unnamed: 0']
df_mc.drop('Unnamed: 0', axis = 1, inplace = True)
df_mc

df_mc.sort_values(by=2021, inplace = True)
#df_mc

df_mc[2021].describe()

df_mc1 = df_mc.loc[df_mc[2021] >= 4.119200]
mc12012 = df_mc1['Ticker'].tolist()
mc12012

df_stocks= yf.download(['DG.PA',
 'SGO.PA',
 'PEUG.PA',
 'URW.AS',
 'TTE.PA',
 'STM.PA',
 
 
 'VIE.PA',
 'VIV.PA']
,
  start='2021-01-01', end='2021-12-31')['Adj Close']
df_stocks.fillna(df_stocks.mean(), inplace = True)

mu = expected_returns.mean_historical_return(df_stocks) 
Sigma = risk_models.sample_cov(df_stocks)
ef = EfficientFrontier(mu, Sigma, weight_bounds=(0.01,0.3)) 
sharpe_pfolio=ef.max_sharpe() 
sharpe_pwt=ef.clean_weights()
print(sharpe_pwt)

print (mc)

tickers =[]
t_weights =[]
for i in sharpe_pwt:
  if sharpe_pwt[i] > 0:
    t_weights.append(sharpe_pwt[i])
    tickers.append(i)


fig1, ax1 = plt.subplots()
ax1.pie(t_weights) 
ax1.axis('equal')

plt.legend(tickers, loc="best")
plt.axis('equal')

data = yf.download(['^FCHI'], start='2011-01-01', end='2021-12-31') ['Adj Close']
ax2 = ((data.pct_change()+1).cumprod()).plot(figsize=(10, 7))
plt.legend(['CAC 40'])
plt.title("Adjusted Close Price", fontsize=16)
plt.ylabel('Price', fontsize=14)
plt.xlabel('Year', fontsize=14)
plt.grid(which="major", color='k', linestyle='-.', linewidth=0.5)
plt.show()

df_reg = pd.read_excel('dat.xlsx')
df_reg

df_d = df_reg.loc[df_reg['Год'] == 2021]
df_d
rf=0.0398
mean = df_d.mean() * 255 -rf
sigma = df_d.std() * np.sqrt(255)
sharpe =  mean / sigma
sharpe

mean = df_d.mean() * 255 -rf
std_neg = df_d[df_d<rf].std()*np.sqrt(255)
sortino = mean/std_neg
sortino

df_reg = pd.read_excel('dat.xlsx')

import statsmodels.formula.api as smf
import statsmodels.api as sm
results = smf.ols('pb1 ~ CAC40', data=df_reg).fit()
results.summary()

results = smf.ols('pb3 ~ CAC40', data=df_reg).fit()
results.summary()